//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HMS.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class HMS_DB2Entities : DbContext
    {
        public HMS_DB2Entities()
            : base("name=HMS_DB2Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Tbl_Master_Category> Tbl_Master_Category { get; set; }
        public virtual DbSet<Tbl_Master_Company> Tbl_Master_Company { get; set; }
        public virtual DbSet<Tbl_Master_Customer> Tbl_Master_Customer { get; set; }
        public virtual DbSet<Tbl_Master_Doctor> Tbl_Master_Doctor { get; set; }
        public virtual DbSet<Tbl_Master_Frm> Tbl_Master_Frm { get; set; }
        public virtual DbSet<Tbl_Master_Item> Tbl_Master_Item { get; set; }
        public virtual DbSet<Tbl_Master_ItemType> Tbl_Master_ItemType { get; set; }
        public virtual DbSet<Tbl_Master_State> Tbl_Master_State { get; set; }
        public virtual DbSet<Tbl_Master_Supplier> Tbl_Master_Supplier { get; set; }
        public virtual DbSet<Tbl_Master_Unit> Tbl_Master_Unit { get; set; }
        public virtual DbSet<Tbl_Master_User> Tbl_Master_User { get; set; }
        public virtual DbSet<Tbl_Purchase> Tbl_Purchase { get; set; }
        public virtual DbSet<Tbl_Purchase_Detail> Tbl_Purchase_Detail { get; set; }
        public virtual DbSet<Tbl_Temp_Purchase_Details> Tbl_Temp_Purchase_Details { get; set; }
        public virtual DbSet<Tbl_MasterFirm> Tbl_MasterFirm { get; set; }
        public virtual DbSet<Tbl_Sale> Tbl_Sale { get; set; }
        public virtual DbSet<Tbl_Sale_Detail> Tbl_Sale_Detail { get; set; }
        public virtual DbSet<Tbl_Temp_Sale_Details> Tbl_Temp_Sale_Details { get; set; }
    
        public virtual int Sp_Delete_Master_Category(Nullable<decimal> id, Nullable<decimal> uid, ObjectParameter msg)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(decimal));
    
            var uidParameter = uid.HasValue ?
                new ObjectParameter("Uid", uid) :
                new ObjectParameter("Uid", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Delete_Master_Category", idParameter, uidParameter, msg);
        }
    
        public virtual int Sp_Delete_Master_Company(Nullable<decimal> id, Nullable<decimal> uid, ObjectParameter msg)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(decimal));
    
            var uidParameter = uid.HasValue ?
                new ObjectParameter("Uid", uid) :
                new ObjectParameter("Uid", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Delete_Master_Company", idParameter, uidParameter, msg);
        }
    
        public virtual int Sp_Delete_Master_Customer(Nullable<decimal> id, Nullable<decimal> uid, ObjectParameter msg)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(decimal));
    
            var uidParameter = uid.HasValue ?
                new ObjectParameter("Uid", uid) :
                new ObjectParameter("Uid", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Delete_Master_Customer", idParameter, uidParameter, msg);
        }
    
        public virtual int Sp_Delete_Master_Doctor(Nullable<decimal> id, Nullable<decimal> uid, ObjectParameter msg)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(decimal));
    
            var uidParameter = uid.HasValue ?
                new ObjectParameter("Uid", uid) :
                new ObjectParameter("Uid", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Delete_Master_Doctor", idParameter, uidParameter, msg);
        }
    
        public virtual int Sp_Delete_Master_Item(Nullable<decimal> id, Nullable<decimal> uid, ObjectParameter msg)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(decimal));
    
            var uidParameter = uid.HasValue ?
                new ObjectParameter("Uid", uid) :
                new ObjectParameter("Uid", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Delete_Master_Item", idParameter, uidParameter, msg);
        }
    
        public virtual int Sp_Delete_Master_ItemType(Nullable<decimal> id, Nullable<decimal> uid, ObjectParameter msg)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(decimal));
    
            var uidParameter = uid.HasValue ?
                new ObjectParameter("Uid", uid) :
                new ObjectParameter("Uid", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Delete_Master_ItemType", idParameter, uidParameter, msg);
        }
    
        public virtual int Sp_Delete_Master_State(Nullable<decimal> id, Nullable<decimal> uid, ObjectParameter msg)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(decimal));
    
            var uidParameter = uid.HasValue ?
                new ObjectParameter("Uid", uid) :
                new ObjectParameter("Uid", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Delete_Master_State", idParameter, uidParameter, msg);
        }
    
        public virtual int Sp_Delete_Master_Supplier(Nullable<decimal> id, Nullable<decimal> uid, ObjectParameter msg)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(decimal));
    
            var uidParameter = uid.HasValue ?
                new ObjectParameter("Uid", uid) :
                new ObjectParameter("Uid", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Delete_Master_Supplier", idParameter, uidParameter, msg);
        }
    
        public virtual int Sp_Delete_Master_Unit(Nullable<decimal> id, Nullable<decimal> uid, ObjectParameter msg)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(decimal));
    
            var uidParameter = uid.HasValue ?
                new ObjectParameter("Uid", uid) :
                new ObjectParameter("Uid", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Delete_Master_Unit", idParameter, uidParameter, msg);
        }
    
        public virtual int Sp_Delete_Master_User(Nullable<decimal> id, Nullable<decimal> uid, ObjectParameter msg)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(decimal));
    
            var uidParameter = uid.HasValue ?
                new ObjectParameter("Uid", uid) :
                new ObjectParameter("Uid", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Delete_Master_User", idParameter, uidParameter, msg);
        }
    
        public virtual int Sp_Delete_Purchase(Nullable<decimal> id, ObjectParameter msg)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Delete_Purchase", idParameter, msg);
        }
    
        public virtual int Sp_Delete_PurchaseDetails(Nullable<decimal> id, ObjectParameter msg)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Delete_PurchaseDetails", idParameter, msg);
        }
    
        public virtual int Sp_Delete_TempPurchaseDetails(Nullable<decimal> id, ObjectParameter msg)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Delete_TempPurchaseDetails", idParameter, msg);
        }
    
        public virtual ObjectResult<Sp_Get_Master_Customer_Result> Sp_Get_Master_Customer()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_Get_Master_Customer_Result>("Sp_Get_Master_Customer");
        }
    
        public virtual ObjectResult<Sp_get_Master_Item_Result> Sp_get_Master_Item()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_get_Master_Item_Result>("Sp_get_Master_Item");
        }
    
        public virtual ObjectResult<Sp_Get_Master_Supplier_Result> Sp_Get_Master_Supplier()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_Get_Master_Supplier_Result>("Sp_Get_Master_Supplier");
        }
    
        public virtual ObjectResult<Sp_get_Temp_Purchase_Detail_Result> Sp_get_Temp_Purchase_Detail()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_get_Temp_Purchase_Detail_Result>("Sp_get_Temp_Purchase_Detail");
        }
    
        public virtual ObjectResult<sp_get_Temp_PurchaseDetail_Result> sp_get_Temp_PurchaseDetail(string keyId)
        {
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_get_Temp_PurchaseDetail_Result>("sp_get_Temp_PurchaseDetail", keyIdParameter);
        }
    
        public virtual int Sp_Insert_Master_Category(string category, Nullable<decimal> uid, string session, string ip)
        {
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var uidParameter = uid.HasValue ?
                new ObjectParameter("Uid", uid) :
                new ObjectParameter("Uid", typeof(decimal));
    
            var sessionParameter = session != null ?
                new ObjectParameter("Session", session) :
                new ObjectParameter("Session", typeof(string));
    
            var ipParameter = ip != null ?
                new ObjectParameter("Ip", ip) :
                new ObjectParameter("Ip", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Insert_Master_Category", categoryParameter, uidParameter, sessionParameter, ipParameter);
        }
    
        public virtual int Sp_Insert_Master_Company(string company, Nullable<decimal> uid, string session, string ip)
        {
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var uidParameter = uid.HasValue ?
                new ObjectParameter("Uid", uid) :
                new ObjectParameter("Uid", typeof(decimal));
    
            var sessionParameter = session != null ?
                new ObjectParameter("Session", session) :
                new ObjectParameter("Session", typeof(string));
    
            var ipParameter = ip != null ?
                new ObjectParameter("Ip", ip) :
                new ObjectParameter("Ip", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Insert_Master_Company", companyParameter, uidParameter, sessionParameter, ipParameter);
        }
    
        public virtual int Sp_Insert_Master_Customer(string customer, string address, string contact, string gSTIN, string email, Nullable<decimal> stateId, Nullable<decimal> uid, string session, string ip)
        {
            var customerParameter = customer != null ?
                new ObjectParameter("Customer", customer) :
                new ObjectParameter("Customer", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var contactParameter = contact != null ?
                new ObjectParameter("Contact", contact) :
                new ObjectParameter("Contact", typeof(string));
    
            var gSTINParameter = gSTIN != null ?
                new ObjectParameter("GSTIN", gSTIN) :
                new ObjectParameter("GSTIN", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(decimal));
    
            var uidParameter = uid.HasValue ?
                new ObjectParameter("Uid", uid) :
                new ObjectParameter("Uid", typeof(decimal));
    
            var sessionParameter = session != null ?
                new ObjectParameter("Session", session) :
                new ObjectParameter("Session", typeof(string));
    
            var ipParameter = ip != null ?
                new ObjectParameter("Ip", ip) :
                new ObjectParameter("Ip", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Insert_Master_Customer", customerParameter, addressParameter, contactParameter, gSTINParameter, emailParameter, stateIdParameter, uidParameter, sessionParameter, ipParameter);
        }
    
        public virtual int Sp_Insert_Master_Doctor(string doctor, Nullable<decimal> uid, string session, string ip)
        {
            var doctorParameter = doctor != null ?
                new ObjectParameter("Doctor", doctor) :
                new ObjectParameter("Doctor", typeof(string));
    
            var uidParameter = uid.HasValue ?
                new ObjectParameter("Uid", uid) :
                new ObjectParameter("Uid", typeof(decimal));
    
            var sessionParameter = session != null ?
                new ObjectParameter("Session", session) :
                new ObjectParameter("Session", typeof(string));
    
            var ipParameter = ip != null ?
                new ObjectParameter("Ip", ip) :
                new ObjectParameter("Ip", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Insert_Master_Doctor", doctorParameter, uidParameter, sessionParameter, ipParameter);
        }
    
        public virtual int Sp_Insert_Master_Item(Nullable<decimal> companyId, Nullable<decimal> categoryId, string itemName, Nullable<decimal> unitId, Nullable<decimal> pack, Nullable<decimal> mRP, Nullable<decimal> disc, Nullable<decimal> rate, Nullable<decimal> reorder, Nullable<decimal> tax, Nullable<decimal> openingQty, string batch, string expiry, Nullable<decimal> pCSRate, Nullable<decimal> uid, string session, string ip)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(decimal));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(decimal));
    
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(decimal));
    
            var packParameter = pack.HasValue ?
                new ObjectParameter("Pack", pack) :
                new ObjectParameter("Pack", typeof(decimal));
    
            var mRPParameter = mRP.HasValue ?
                new ObjectParameter("MRP", mRP) :
                new ObjectParameter("MRP", typeof(decimal));
    
            var discParameter = disc.HasValue ?
                new ObjectParameter("Disc", disc) :
                new ObjectParameter("Disc", typeof(decimal));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(decimal));
    
            var reorderParameter = reorder.HasValue ?
                new ObjectParameter("Reorder", reorder) :
                new ObjectParameter("Reorder", typeof(decimal));
    
            var taxParameter = tax.HasValue ?
                new ObjectParameter("Tax", tax) :
                new ObjectParameter("Tax", typeof(decimal));
    
            var openingQtyParameter = openingQty.HasValue ?
                new ObjectParameter("OpeningQty", openingQty) :
                new ObjectParameter("OpeningQty", typeof(decimal));
    
            var batchParameter = batch != null ?
                new ObjectParameter("Batch", batch) :
                new ObjectParameter("Batch", typeof(string));
    
            var expiryParameter = expiry != null ?
                new ObjectParameter("Expiry", expiry) :
                new ObjectParameter("Expiry", typeof(string));
    
            var pCSRateParameter = pCSRate.HasValue ?
                new ObjectParameter("PCSRate", pCSRate) :
                new ObjectParameter("PCSRate", typeof(decimal));
    
            var uidParameter = uid.HasValue ?
                new ObjectParameter("Uid", uid) :
                new ObjectParameter("Uid", typeof(decimal));
    
            var sessionParameter = session != null ?
                new ObjectParameter("Session", session) :
                new ObjectParameter("Session", typeof(string));
    
            var ipParameter = ip != null ?
                new ObjectParameter("Ip", ip) :
                new ObjectParameter("Ip", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Insert_Master_Item", companyIdParameter, categoryIdParameter, itemNameParameter, unitIdParameter, packParameter, mRPParameter, discParameter, rateParameter, reorderParameter, taxParameter, openingQtyParameter, batchParameter, expiryParameter, pCSRateParameter, uidParameter, sessionParameter, ipParameter);
        }
    
        public virtual int Sp_Insert_Master_Itemtype(string itemType, Nullable<decimal> uid, string session, string ip)
        {
            var itemTypeParameter = itemType != null ?
                new ObjectParameter("ItemType", itemType) :
                new ObjectParameter("ItemType", typeof(string));
    
            var uidParameter = uid.HasValue ?
                new ObjectParameter("Uid", uid) :
                new ObjectParameter("Uid", typeof(decimal));
    
            var sessionParameter = session != null ?
                new ObjectParameter("Session", session) :
                new ObjectParameter("Session", typeof(string));
    
            var ipParameter = ip != null ?
                new ObjectParameter("Ip", ip) :
                new ObjectParameter("Ip", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Insert_Master_Itemtype", itemTypeParameter, uidParameter, sessionParameter, ipParameter);
        }
    
        public virtual int Sp_Insert_Master_State(string state, string stateCode, Nullable<decimal> uid, string session, string ip)
        {
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var stateCodeParameter = stateCode != null ?
                new ObjectParameter("StateCode", stateCode) :
                new ObjectParameter("StateCode", typeof(string));
    
            var uidParameter = uid.HasValue ?
                new ObjectParameter("Uid", uid) :
                new ObjectParameter("Uid", typeof(decimal));
    
            var sessionParameter = session != null ?
                new ObjectParameter("Session", session) :
                new ObjectParameter("Session", typeof(string));
    
            var ipParameter = ip != null ?
                new ObjectParameter("Ip", ip) :
                new ObjectParameter("Ip", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Insert_Master_State", stateParameter, stateCodeParameter, uidParameter, sessionParameter, ipParameter);
        }
    
        public virtual int Sp_Insert_Master_Supplier(string supplier, string address, string contact, string gSTIN, string email, Nullable<decimal> stateId, Nullable<decimal> uid, string session, string ip)
        {
            var supplierParameter = supplier != null ?
                new ObjectParameter("Supplier", supplier) :
                new ObjectParameter("Supplier", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var contactParameter = contact != null ?
                new ObjectParameter("Contact", contact) :
                new ObjectParameter("Contact", typeof(string));
    
            var gSTINParameter = gSTIN != null ?
                new ObjectParameter("GSTIN", gSTIN) :
                new ObjectParameter("GSTIN", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(decimal));
    
            var uidParameter = uid.HasValue ?
                new ObjectParameter("Uid", uid) :
                new ObjectParameter("Uid", typeof(decimal));
    
            var sessionParameter = session != null ?
                new ObjectParameter("Session", session) :
                new ObjectParameter("Session", typeof(string));
    
            var ipParameter = ip != null ?
                new ObjectParameter("Ip", ip) :
                new ObjectParameter("Ip", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Insert_Master_Supplier", supplierParameter, addressParameter, contactParameter, gSTINParameter, emailParameter, stateIdParameter, uidParameter, sessionParameter, ipParameter);
        }
    
        public virtual int Sp_Insert_Master_Unit(string unit, Nullable<decimal> uid, string session, string ip)
        {
            var unitParameter = unit != null ?
                new ObjectParameter("unit", unit) :
                new ObjectParameter("unit", typeof(string));
    
            var uidParameter = uid.HasValue ?
                new ObjectParameter("Uid", uid) :
                new ObjectParameter("Uid", typeof(decimal));
    
            var sessionParameter = session != null ?
                new ObjectParameter("Session", session) :
                new ObjectParameter("Session", typeof(string));
    
            var ipParameter = ip != null ?
                new ObjectParameter("Ip", ip) :
                new ObjectParameter("Ip", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Insert_Master_Unit", unitParameter, uidParameter, sessionParameter, ipParameter);
        }
    
        public virtual int Sp_Insert_Master_User(string userName, string password, string status, Nullable<decimal> uid, string session, string ip)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var uidParameter = uid.HasValue ?
                new ObjectParameter("Uid", uid) :
                new ObjectParameter("Uid", typeof(decimal));
    
            var sessionParameter = session != null ?
                new ObjectParameter("Session", session) :
                new ObjectParameter("Session", typeof(string));
    
            var ipParameter = ip != null ?
                new ObjectParameter("Ip", ip) :
                new ObjectParameter("Ip", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Insert_Master_User", userNameParameter, passwordParameter, statusParameter, uidParameter, sessionParameter, ipParameter);
        }
    
        public virtual int Sp_Insert_Purchase(string date, Nullable<decimal> invoiceNo, string invoiceDate, Nullable<decimal> supplieId, Nullable<decimal> totalAmount, string narration, Nullable<decimal> uid, string session, ObjectParameter msg, ObjectParameter id)
        {
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            var invoiceNoParameter = invoiceNo.HasValue ?
                new ObjectParameter("InvoiceNo", invoiceNo) :
                new ObjectParameter("InvoiceNo", typeof(decimal));
    
            var invoiceDateParameter = invoiceDate != null ?
                new ObjectParameter("InvoiceDate", invoiceDate) :
                new ObjectParameter("InvoiceDate", typeof(string));
    
            var supplieIdParameter = supplieId.HasValue ?
                new ObjectParameter("SupplieId", supplieId) :
                new ObjectParameter("SupplieId", typeof(decimal));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(decimal));
    
            var narrationParameter = narration != null ?
                new ObjectParameter("Narration", narration) :
                new ObjectParameter("Narration", typeof(string));
    
            var uidParameter = uid.HasValue ?
                new ObjectParameter("uid", uid) :
                new ObjectParameter("uid", typeof(decimal));
    
            var sessionParameter = session != null ?
                new ObjectParameter("Session", session) :
                new ObjectParameter("Session", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Insert_Purchase", dateParameter, invoiceNoParameter, invoiceDateParameter, supplieIdParameter, totalAmountParameter, narrationParameter, uidParameter, sessionParameter, msg, id);
        }
    
        public virtual int Sp_Insert_PurchaseDetails(Nullable<decimal> id, string date, string keyId, Nullable<decimal> uid, string session, ObjectParameter msg)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(decimal));
    
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            var uidParameter = uid.HasValue ?
                new ObjectParameter("Uid", uid) :
                new ObjectParameter("Uid", typeof(decimal));
    
            var sessionParameter = session != null ?
                new ObjectParameter("Session", session) :
                new ObjectParameter("Session", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Insert_PurchaseDetails", idParameter, dateParameter, keyIdParameter, uidParameter, sessionParameter, msg);
        }
    
        public virtual int Sp_Insert_TempPurchaseDetails(string keyId, Nullable<decimal> itemId, string unit, string pack, string batch, string expiry, Nullable<decimal> qty, Nullable<decimal> totalQty, Nullable<decimal> mRP, Nullable<decimal> disc, Nullable<decimal> rate, Nullable<decimal> amount, Nullable<decimal> cGST, Nullable<decimal> sGST, Nullable<decimal> iGST, Nullable<decimal> netAmount, ObjectParameter msg)
        {
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(decimal));
    
            var unitParameter = unit != null ?
                new ObjectParameter("Unit", unit) :
                new ObjectParameter("Unit", typeof(string));
    
            var packParameter = pack != null ?
                new ObjectParameter("Pack", pack) :
                new ObjectParameter("Pack", typeof(string));
    
            var batchParameter = batch != null ?
                new ObjectParameter("Batch", batch) :
                new ObjectParameter("Batch", typeof(string));
    
            var expiryParameter = expiry != null ?
                new ObjectParameter("Expiry", expiry) :
                new ObjectParameter("Expiry", typeof(string));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(decimal));
    
            var totalQtyParameter = totalQty.HasValue ?
                new ObjectParameter("TotalQty", totalQty) :
                new ObjectParameter("TotalQty", typeof(decimal));
    
            var mRPParameter = mRP.HasValue ?
                new ObjectParameter("MRP", mRP) :
                new ObjectParameter("MRP", typeof(decimal));
    
            var discParameter = disc.HasValue ?
                new ObjectParameter("Disc", disc) :
                new ObjectParameter("Disc", typeof(decimal));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(decimal));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var cGSTParameter = cGST.HasValue ?
                new ObjectParameter("CGST", cGST) :
                new ObjectParameter("CGST", typeof(decimal));
    
            var sGSTParameter = sGST.HasValue ?
                new ObjectParameter("SGST", sGST) :
                new ObjectParameter("SGST", typeof(decimal));
    
            var iGSTParameter = iGST.HasValue ?
                new ObjectParameter("IGST", iGST) :
                new ObjectParameter("IGST", typeof(decimal));
    
            var netAmountParameter = netAmount.HasValue ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Insert_TempPurchaseDetails", keyIdParameter, itemIdParameter, unitParameter, packParameter, batchParameter, expiryParameter, qtyParameter, totalQtyParameter, mRPParameter, discParameter, rateParameter, amountParameter, cGSTParameter, sGSTParameter, iGSTParameter, netAmountParameter, msg);
        }
    
        public virtual int Sp_Update_AllPurchaseDetails(Nullable<decimal> id, Nullable<decimal> tempId, ObjectParameter msg)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(decimal));
    
            var tempIdParameter = tempId.HasValue ?
                new ObjectParameter("TempId", tempId) :
                new ObjectParameter("TempId", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Update_AllPurchaseDetails", idParameter, tempIdParameter, msg);
        }
    
        public virtual int Sp_Update_Master_Category(Nullable<decimal> id, string category, Nullable<decimal> updateBy)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(decimal));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var updateByParameter = updateBy.HasValue ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Update_Master_Category", idParameter, categoryParameter, updateByParameter);
        }
    
        public virtual int Sp_Update_Master_Company(Nullable<decimal> id, string company, Nullable<decimal> updateBy)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(decimal));
    
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var updateByParameter = updateBy.HasValue ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Update_Master_Company", idParameter, companyParameter, updateByParameter);
        }
    
        public virtual int Sp_Update_Master_Customer(Nullable<decimal> id, string customer, string address, string contact, string email, string gSTIN, Nullable<decimal> stateId, Nullable<decimal> updateBy)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(decimal));
    
            var customerParameter = customer != null ?
                new ObjectParameter("Customer", customer) :
                new ObjectParameter("Customer", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var contactParameter = contact != null ?
                new ObjectParameter("Contact", contact) :
                new ObjectParameter("Contact", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var gSTINParameter = gSTIN != null ?
                new ObjectParameter("GSTIN", gSTIN) :
                new ObjectParameter("GSTIN", typeof(string));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(decimal));
    
            var updateByParameter = updateBy.HasValue ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Update_Master_Customer", idParameter, customerParameter, addressParameter, contactParameter, emailParameter, gSTINParameter, stateIdParameter, updateByParameter);
        }
    
        public virtual int Sp_Update_Master_Doctor(Nullable<decimal> id, string doctor, Nullable<decimal> updateBy)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(decimal));
    
            var doctorParameter = doctor != null ?
                new ObjectParameter("Doctor", doctor) :
                new ObjectParameter("Doctor", typeof(string));
    
            var updateByParameter = updateBy.HasValue ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Update_Master_Doctor", idParameter, doctorParameter, updateByParameter);
        }
    
        public virtual int Sp_Update_Master_Item(Nullable<decimal> id, Nullable<decimal> companyId, Nullable<decimal> categoryId, string itemName, Nullable<decimal> unitId, Nullable<decimal> pack, Nullable<decimal> mRP, Nullable<decimal> disc, Nullable<decimal> rate, Nullable<decimal> reorder, Nullable<decimal> tax, Nullable<decimal> openingQty, string batch, string expiry, Nullable<decimal> pCSRate, Nullable<decimal> updateBy)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(decimal));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(decimal));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(decimal));
    
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(decimal));
    
            var packParameter = pack.HasValue ?
                new ObjectParameter("Pack", pack) :
                new ObjectParameter("Pack", typeof(decimal));
    
            var mRPParameter = mRP.HasValue ?
                new ObjectParameter("MRP", mRP) :
                new ObjectParameter("MRP", typeof(decimal));
    
            var discParameter = disc.HasValue ?
                new ObjectParameter("Disc", disc) :
                new ObjectParameter("Disc", typeof(decimal));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(decimal));
    
            var reorderParameter = reorder.HasValue ?
                new ObjectParameter("Reorder", reorder) :
                new ObjectParameter("Reorder", typeof(decimal));
    
            var taxParameter = tax.HasValue ?
                new ObjectParameter("Tax", tax) :
                new ObjectParameter("Tax", typeof(decimal));
    
            var openingQtyParameter = openingQty.HasValue ?
                new ObjectParameter("OpeningQty", openingQty) :
                new ObjectParameter("OpeningQty", typeof(decimal));
    
            var batchParameter = batch != null ?
                new ObjectParameter("Batch", batch) :
                new ObjectParameter("Batch", typeof(string));
    
            var expiryParameter = expiry != null ?
                new ObjectParameter("Expiry", expiry) :
                new ObjectParameter("Expiry", typeof(string));
    
            var pCSRateParameter = pCSRate.HasValue ?
                new ObjectParameter("PCSRate", pCSRate) :
                new ObjectParameter("PCSRate", typeof(decimal));
    
            var updateByParameter = updateBy.HasValue ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Update_Master_Item", idParameter, companyIdParameter, categoryIdParameter, itemNameParameter, unitIdParameter, packParameter, mRPParameter, discParameter, rateParameter, reorderParameter, taxParameter, openingQtyParameter, batchParameter, expiryParameter, pCSRateParameter, updateByParameter);
        }
    
        public virtual int Sp_Update_Master_ItemType(Nullable<decimal> id, string itemType, Nullable<decimal> updateBy)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(decimal));
    
            var itemTypeParameter = itemType != null ?
                new ObjectParameter("ItemType", itemType) :
                new ObjectParameter("ItemType", typeof(string));
    
            var updateByParameter = updateBy.HasValue ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Update_Master_ItemType", idParameter, itemTypeParameter, updateByParameter);
        }
    
        public virtual int Sp_Update_Master_State(Nullable<decimal> id, string state, string stateCode, Nullable<decimal> updateBy)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(decimal));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var stateCodeParameter = stateCode != null ?
                new ObjectParameter("StateCode", stateCode) :
                new ObjectParameter("StateCode", typeof(string));
    
            var updateByParameter = updateBy.HasValue ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Update_Master_State", idParameter, stateParameter, stateCodeParameter, updateByParameter);
        }
    
        public virtual int Sp_Update_Master_Supplier(Nullable<decimal> id, string supplier, string address, string contact, string email, string gSTIN, Nullable<decimal> stateId, Nullable<decimal> updateBy)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(decimal));
    
            var supplierParameter = supplier != null ?
                new ObjectParameter("Supplier", supplier) :
                new ObjectParameter("Supplier", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var contactParameter = contact != null ?
                new ObjectParameter("Contact", contact) :
                new ObjectParameter("Contact", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var gSTINParameter = gSTIN != null ?
                new ObjectParameter("GSTIN", gSTIN) :
                new ObjectParameter("GSTIN", typeof(string));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(decimal));
    
            var updateByParameter = updateBy.HasValue ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Update_Master_Supplier", idParameter, supplierParameter, addressParameter, contactParameter, emailParameter, gSTINParameter, stateIdParameter, updateByParameter);
        }
    
        public virtual int Sp_Update_Master_Unit(Nullable<decimal> id, string unit, Nullable<decimal> updateBy)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(decimal));
    
            var unitParameter = unit != null ?
                new ObjectParameter("Unit", unit) :
                new ObjectParameter("Unit", typeof(string));
    
            var updateByParameter = updateBy.HasValue ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Update_Master_Unit", idParameter, unitParameter, updateByParameter);
        }
    
        public virtual int Sp_Update_Master_User(Nullable<decimal> id, string userName, string password, string status, Nullable<decimal> updateBy)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(decimal));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var updateByParameter = updateBy.HasValue ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Update_Master_User", idParameter, userNameParameter, passwordParameter, statusParameter, updateByParameter);
        }
    
        public virtual int Sp_Update_Purchase(Nullable<decimal> id, Nullable<decimal> vN, string date, Nullable<decimal> invoiceNo, string invoiceDate, Nullable<decimal> supplierId, Nullable<decimal> totalAmount, string narration, Nullable<decimal> uid, ObjectParameter msg)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(decimal));
    
            var vNParameter = vN.HasValue ?
                new ObjectParameter("VN", vN) :
                new ObjectParameter("VN", typeof(decimal));
    
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            var invoiceNoParameter = invoiceNo.HasValue ?
                new ObjectParameter("InvoiceNo", invoiceNo) :
                new ObjectParameter("InvoiceNo", typeof(decimal));
    
            var invoiceDateParameter = invoiceDate != null ?
                new ObjectParameter("InvoiceDate", invoiceDate) :
                new ObjectParameter("InvoiceDate", typeof(string));
    
            var supplierIdParameter = supplierId.HasValue ?
                new ObjectParameter("SupplierId", supplierId) :
                new ObjectParameter("SupplierId", typeof(decimal));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(decimal));
    
            var narrationParameter = narration != null ?
                new ObjectParameter("Narration", narration) :
                new ObjectParameter("Narration", typeof(string));
    
            var uidParameter = uid.HasValue ?
                new ObjectParameter("uid", uid) :
                new ObjectParameter("uid", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Update_Purchase", idParameter, vNParameter, dateParameter, invoiceNoParameter, invoiceDateParameter, supplierIdParameter, totalAmountParameter, narrationParameter, uidParameter, msg);
        }
    
        public virtual int Sp_Update_PurchaseDetails(Nullable<decimal> id, string keyId, ObjectParameter msg)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(decimal));
    
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Update_PurchaseDetails", idParameter, keyIdParameter, msg);
        }
    
        public virtual int Sp_Update_TempPurchaseDetails(Nullable<decimal> id, string keyId, Nullable<decimal> itemId, string unit, string pack, string batch, string expiry, Nullable<decimal> qty, Nullable<decimal> totalQty, Nullable<decimal> mRP, Nullable<decimal> disc, Nullable<decimal> rate, Nullable<decimal> amount, Nullable<decimal> cGST, Nullable<decimal> sGST, Nullable<decimal> iGST, Nullable<decimal> netAmount, ObjectParameter msg)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(decimal));
    
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(decimal));
    
            var unitParameter = unit != null ?
                new ObjectParameter("Unit", unit) :
                new ObjectParameter("Unit", typeof(string));
    
            var packParameter = pack != null ?
                new ObjectParameter("Pack", pack) :
                new ObjectParameter("Pack", typeof(string));
    
            var batchParameter = batch != null ?
                new ObjectParameter("Batch", batch) :
                new ObjectParameter("Batch", typeof(string));
    
            var expiryParameter = expiry != null ?
                new ObjectParameter("Expiry", expiry) :
                new ObjectParameter("Expiry", typeof(string));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(decimal));
    
            var totalQtyParameter = totalQty.HasValue ?
                new ObjectParameter("TotalQty", totalQty) :
                new ObjectParameter("TotalQty", typeof(decimal));
    
            var mRPParameter = mRP.HasValue ?
                new ObjectParameter("MRP", mRP) :
                new ObjectParameter("MRP", typeof(decimal));
    
            var discParameter = disc.HasValue ?
                new ObjectParameter("Disc", disc) :
                new ObjectParameter("Disc", typeof(decimal));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(decimal));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var cGSTParameter = cGST.HasValue ?
                new ObjectParameter("CGST", cGST) :
                new ObjectParameter("CGST", typeof(decimal));
    
            var sGSTParameter = sGST.HasValue ?
                new ObjectParameter("SGST", sGST) :
                new ObjectParameter("SGST", typeof(decimal));
    
            var iGSTParameter = iGST.HasValue ?
                new ObjectParameter("IGST", iGST) :
                new ObjectParameter("IGST", typeof(decimal));
    
            var netAmountParameter = netAmount.HasValue ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Update_TempPurchaseDetails", idParameter, keyIdParameter, itemIdParameter, unitParameter, packParameter, batchParameter, expiryParameter, qtyParameter, totalQtyParameter, mRPParameter, discParameter, rateParameter, amountParameter, cGSTParameter, sGSTParameter, iGSTParameter, netAmountParameter, msg);
        }
    
        public virtual ObjectResult<Sp_get_Purchase_Result> Sp_get_Purchase()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_get_Purchase_Result>("Sp_get_Purchase");
        }
    
        public virtual int Sp_Update_EditPurchaseDetails(Nullable<decimal> id, Nullable<decimal> itemId, string unit, string pack, string batch, string expiry, Nullable<decimal> qty, Nullable<decimal> totalQty, Nullable<decimal> mRP, Nullable<decimal> disc, Nullable<decimal> rate, Nullable<decimal> amount, Nullable<decimal> cGST, Nullable<decimal> sGST, Nullable<decimal> iGST, Nullable<decimal> netAmount, ObjectParameter msg)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(decimal));
    
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(decimal));
    
            var unitParameter = unit != null ?
                new ObjectParameter("Unit", unit) :
                new ObjectParameter("Unit", typeof(string));
    
            var packParameter = pack != null ?
                new ObjectParameter("Pack", pack) :
                new ObjectParameter("Pack", typeof(string));
    
            var batchParameter = batch != null ?
                new ObjectParameter("Batch", batch) :
                new ObjectParameter("Batch", typeof(string));
    
            var expiryParameter = expiry != null ?
                new ObjectParameter("Expiry", expiry) :
                new ObjectParameter("Expiry", typeof(string));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(decimal));
    
            var totalQtyParameter = totalQty.HasValue ?
                new ObjectParameter("TotalQty", totalQty) :
                new ObjectParameter("TotalQty", typeof(decimal));
    
            var mRPParameter = mRP.HasValue ?
                new ObjectParameter("MRP", mRP) :
                new ObjectParameter("MRP", typeof(decimal));
    
            var discParameter = disc.HasValue ?
                new ObjectParameter("Disc", disc) :
                new ObjectParameter("Disc", typeof(decimal));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(decimal));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var cGSTParameter = cGST.HasValue ?
                new ObjectParameter("CGST", cGST) :
                new ObjectParameter("CGST", typeof(decimal));
    
            var sGSTParameter = sGST.HasValue ?
                new ObjectParameter("SGST", sGST) :
                new ObjectParameter("SGST", typeof(decimal));
    
            var iGSTParameter = iGST.HasValue ?
                new ObjectParameter("IGST", iGST) :
                new ObjectParameter("IGST", typeof(decimal));
    
            var netAmountParameter = netAmount.HasValue ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Update_EditPurchaseDetails", idParameter, itemIdParameter, unitParameter, packParameter, batchParameter, expiryParameter, qtyParameter, totalQtyParameter, mRPParameter, discParameter, rateParameter, amountParameter, cGSTParameter, sGSTParameter, iGSTParameter, netAmountParameter, msg);
        }
    
        public virtual int Sp_Delete_Sale(Nullable<decimal> id, ObjectParameter msg)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Delete_Sale", idParameter, msg);
        }
    
        public virtual int Sp_Delete_SaleDetails(Nullable<decimal> id, ObjectParameter msg)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Delete_SaleDetails", idParameter, msg);
        }
    
        public virtual int Sp_Delete_TempSaleDetails(Nullable<decimal> id, ObjectParameter msg)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Delete_TempSaleDetails", idParameter, msg);
        }
    
        public virtual ObjectResult<Sp_get_Sale_Detail_Result> Sp_get_Sale_Detail(Nullable<decimal> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_get_Sale_Detail_Result>("Sp_get_Sale_Detail", idParameter);
        }
    
        public virtual ObjectResult<Sp_get_Sale_Report_Result> Sp_get_Sale_Report(Nullable<decimal> doctor, string date1, string date2)
        {
            var doctorParameter = doctor.HasValue ?
                new ObjectParameter("Doctor", doctor) :
                new ObjectParameter("Doctor", typeof(decimal));
    
            var date1Parameter = date1 != null ?
                new ObjectParameter("Date1", date1) :
                new ObjectParameter("Date1", typeof(string));
    
            var date2Parameter = date2 != null ?
                new ObjectParameter("Date2", date2) :
                new ObjectParameter("Date2", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_get_Sale_Report_Result>("Sp_get_Sale_Report", doctorParameter, date1Parameter, date2Parameter);
        }
    
        public virtual ObjectResult<Sp_get_Sale_Report_Doctor_Result> Sp_get_Sale_Report_Doctor(Nullable<decimal> doctor, string date1, string date2)
        {
            var doctorParameter = doctor.HasValue ?
                new ObjectParameter("Doctor", doctor) :
                new ObjectParameter("Doctor", typeof(decimal));
    
            var date1Parameter = date1 != null ?
                new ObjectParameter("Date1", date1) :
                new ObjectParameter("Date1", typeof(string));
    
            var date2Parameter = date2 != null ?
                new ObjectParameter("Date2", date2) :
                new ObjectParameter("Date2", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_get_Sale_Report_Doctor_Result>("Sp_get_Sale_Report_Doctor", doctorParameter, date1Parameter, date2Parameter);
        }
    
        public virtual ObjectResult<Sp_get_Temp_Sale_Detail_Result> Sp_get_Temp_Sale_Detail()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_get_Temp_Sale_Detail_Result>("Sp_get_Temp_Sale_Detail");
        }
    
        public virtual ObjectResult<sp_get_Temp_SaleDetail_Result> sp_get_Temp_SaleDetail(string keyId)
        {
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_get_Temp_SaleDetail_Result>("sp_get_Temp_SaleDetail", keyIdParameter);
        }
    
        public virtual ObjectResult<Sp_get_Total_sale_Report_Result> Sp_get_Total_sale_Report(string date, string date2)
        {
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            var date2Parameter = date2 != null ?
                new ObjectParameter("Date2", date2) :
                new ObjectParameter("Date2", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_get_Total_sale_Report_Result>("Sp_get_Total_sale_Report", dateParameter, date2Parameter);
        }
    
        public virtual int Sp_Insert_Sale(string date, Nullable<decimal> customerId, Nullable<decimal> doctor, Nullable<decimal> totalAmount, string narration, Nullable<decimal> uid, string session, ObjectParameter msg, ObjectParameter id)
        {
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(decimal));
    
            var doctorParameter = doctor.HasValue ?
                new ObjectParameter("Doctor", doctor) :
                new ObjectParameter("Doctor", typeof(decimal));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(decimal));
    
            var narrationParameter = narration != null ?
                new ObjectParameter("Narration", narration) :
                new ObjectParameter("Narration", typeof(string));
    
            var uidParameter = uid.HasValue ?
                new ObjectParameter("uid", uid) :
                new ObjectParameter("uid", typeof(decimal));
    
            var sessionParameter = session != null ?
                new ObjectParameter("Session", session) :
                new ObjectParameter("Session", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Insert_Sale", dateParameter, customerIdParameter, doctorParameter, totalAmountParameter, narrationParameter, uidParameter, sessionParameter, msg, id);
        }
    
        public virtual int Sp_Insert_Sale_Return(Nullable<decimal> vN, string date, Nullable<decimal> customerId, Nullable<decimal> doctor, Nullable<decimal> totalAmount, string narration, Nullable<decimal> uid, string session, ObjectParameter msg, ObjectParameter id)
        {
            var vNParameter = vN.HasValue ?
                new ObjectParameter("VN", vN) :
                new ObjectParameter("VN", typeof(decimal));
    
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(decimal));
    
            var doctorParameter = doctor.HasValue ?
                new ObjectParameter("Doctor", doctor) :
                new ObjectParameter("Doctor", typeof(decimal));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(decimal));
    
            var narrationParameter = narration != null ?
                new ObjectParameter("Narration", narration) :
                new ObjectParameter("Narration", typeof(string));
    
            var uidParameter = uid.HasValue ?
                new ObjectParameter("uid", uid) :
                new ObjectParameter("uid", typeof(decimal));
    
            var sessionParameter = session != null ?
                new ObjectParameter("Session", session) :
                new ObjectParameter("Session", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Insert_Sale_Return", vNParameter, dateParameter, customerIdParameter, doctorParameter, totalAmountParameter, narrationParameter, uidParameter, sessionParameter, msg, id);
        }
    
        public virtual int Sp_Insert_SaleDetails(Nullable<decimal> id, string date, string keyId, Nullable<decimal> uid, string session, ObjectParameter msg)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(decimal));
    
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            var uidParameter = uid.HasValue ?
                new ObjectParameter("Uid", uid) :
                new ObjectParameter("Uid", typeof(decimal));
    
            var sessionParameter = session != null ?
                new ObjectParameter("Session", session) :
                new ObjectParameter("Session", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Insert_SaleDetails", idParameter, dateParameter, keyIdParameter, uidParameter, sessionParameter, msg);
        }
    
        public virtual int Sp_Insert_TempSaleDetails(string keyId, Nullable<decimal> itemId, string unit, string pack, string batch, string expiry, Nullable<decimal> qty, Nullable<decimal> totalQty, Nullable<decimal> mRP, Nullable<decimal> disc, Nullable<decimal> rate, Nullable<decimal> amount, Nullable<decimal> cGST, Nullable<decimal> sGST, Nullable<decimal> iGST, Nullable<decimal> netAmount, ObjectParameter msg)
        {
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(decimal));
    
            var unitParameter = unit != null ?
                new ObjectParameter("Unit", unit) :
                new ObjectParameter("Unit", typeof(string));
    
            var packParameter = pack != null ?
                new ObjectParameter("Pack", pack) :
                new ObjectParameter("Pack", typeof(string));
    
            var batchParameter = batch != null ?
                new ObjectParameter("Batch", batch) :
                new ObjectParameter("Batch", typeof(string));
    
            var expiryParameter = expiry != null ?
                new ObjectParameter("Expiry", expiry) :
                new ObjectParameter("Expiry", typeof(string));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(decimal));
    
            var totalQtyParameter = totalQty.HasValue ?
                new ObjectParameter("TotalQty", totalQty) :
                new ObjectParameter("TotalQty", typeof(decimal));
    
            var mRPParameter = mRP.HasValue ?
                new ObjectParameter("MRP", mRP) :
                new ObjectParameter("MRP", typeof(decimal));
    
            var discParameter = disc.HasValue ?
                new ObjectParameter("Disc", disc) :
                new ObjectParameter("Disc", typeof(decimal));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(decimal));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var cGSTParameter = cGST.HasValue ?
                new ObjectParameter("CGST", cGST) :
                new ObjectParameter("CGST", typeof(decimal));
    
            var sGSTParameter = sGST.HasValue ?
                new ObjectParameter("SGST", sGST) :
                new ObjectParameter("SGST", typeof(decimal));
    
            var iGSTParameter = iGST.HasValue ?
                new ObjectParameter("IGST", iGST) :
                new ObjectParameter("IGST", typeof(decimal));
    
            var netAmountParameter = netAmount.HasValue ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Insert_TempSaleDetails", keyIdParameter, itemIdParameter, unitParameter, packParameter, batchParameter, expiryParameter, qtyParameter, totalQtyParameter, mRPParameter, discParameter, rateParameter, amountParameter, cGSTParameter, sGSTParameter, iGSTParameter, netAmountParameter, msg);
        }
    
        public virtual int Sp_Update_AllSaleDetails(Nullable<decimal> id, Nullable<decimal> tempId, ObjectParameter msg)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(decimal));
    
            var tempIdParameter = tempId.HasValue ?
                new ObjectParameter("TempId", tempId) :
                new ObjectParameter("TempId", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Update_AllSaleDetails", idParameter, tempIdParameter, msg);
        }
    
        public virtual int Sp_Update_EditSaleDetails(Nullable<decimal> id, Nullable<decimal> itemId, string unit, string pack, string batch, string expiry, Nullable<decimal> qty, Nullable<decimal> totalQty, Nullable<decimal> mRP, Nullable<decimal> disc, Nullable<decimal> rate, Nullable<decimal> amount, Nullable<decimal> cGST, Nullable<decimal> sGST, Nullable<decimal> iGST, Nullable<decimal> netAmount, ObjectParameter msg)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(decimal));
    
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(decimal));
    
            var unitParameter = unit != null ?
                new ObjectParameter("Unit", unit) :
                new ObjectParameter("Unit", typeof(string));
    
            var packParameter = pack != null ?
                new ObjectParameter("Pack", pack) :
                new ObjectParameter("Pack", typeof(string));
    
            var batchParameter = batch != null ?
                new ObjectParameter("Batch", batch) :
                new ObjectParameter("Batch", typeof(string));
    
            var expiryParameter = expiry != null ?
                new ObjectParameter("Expiry", expiry) :
                new ObjectParameter("Expiry", typeof(string));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(decimal));
    
            var totalQtyParameter = totalQty.HasValue ?
                new ObjectParameter("TotalQty", totalQty) :
                new ObjectParameter("TotalQty", typeof(decimal));
    
            var mRPParameter = mRP.HasValue ?
                new ObjectParameter("MRP", mRP) :
                new ObjectParameter("MRP", typeof(decimal));
    
            var discParameter = disc.HasValue ?
                new ObjectParameter("Disc", disc) :
                new ObjectParameter("Disc", typeof(decimal));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(decimal));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var cGSTParameter = cGST.HasValue ?
                new ObjectParameter("CGST", cGST) :
                new ObjectParameter("CGST", typeof(decimal));
    
            var sGSTParameter = sGST.HasValue ?
                new ObjectParameter("SGST", sGST) :
                new ObjectParameter("SGST", typeof(decimal));
    
            var iGSTParameter = iGST.HasValue ?
                new ObjectParameter("IGST", iGST) :
                new ObjectParameter("IGST", typeof(decimal));
    
            var netAmountParameter = netAmount.HasValue ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Update_EditSaleDetails", idParameter, itemIdParameter, unitParameter, packParameter, batchParameter, expiryParameter, qtyParameter, totalQtyParameter, mRPParameter, discParameter, rateParameter, amountParameter, cGSTParameter, sGSTParameter, iGSTParameter, netAmountParameter, msg);
        }
    
        public virtual int Sp_Update_Sale(Nullable<decimal> id, Nullable<decimal> vN, string date, Nullable<decimal> customerId, Nullable<decimal> doctor, Nullable<decimal> totalAmount, string narration, Nullable<decimal> uid, ObjectParameter msg)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(decimal));
    
            var vNParameter = vN.HasValue ?
                new ObjectParameter("VN", vN) :
                new ObjectParameter("VN", typeof(decimal));
    
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(decimal));
    
            var doctorParameter = doctor.HasValue ?
                new ObjectParameter("Doctor", doctor) :
                new ObjectParameter("Doctor", typeof(decimal));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(decimal));
    
            var narrationParameter = narration != null ?
                new ObjectParameter("Narration", narration) :
                new ObjectParameter("Narration", typeof(string));
    
            var uidParameter = uid.HasValue ?
                new ObjectParameter("uid", uid) :
                new ObjectParameter("uid", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Update_Sale", idParameter, vNParameter, dateParameter, customerIdParameter, doctorParameter, totalAmountParameter, narrationParameter, uidParameter, msg);
        }
    
        public virtual int Sp_Update_SaleDetails(Nullable<decimal> id, string keyId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(decimal));
    
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Update_SaleDetails", idParameter, keyIdParameter);
        }
    
        public virtual int Sp_Update_TempSaleDetails(Nullable<decimal> id, string keyId, Nullable<decimal> itemId, string unit, string pack, string batch, string expiry, Nullable<decimal> qty, Nullable<decimal> totalQty, Nullable<decimal> mRP, Nullable<decimal> disc, Nullable<decimal> rate, Nullable<decimal> amount, Nullable<decimal> cGST, Nullable<decimal> sGST, Nullable<decimal> iGST, Nullable<decimal> netAmount, ObjectParameter msg)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(decimal));
    
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(decimal));
    
            var unitParameter = unit != null ?
                new ObjectParameter("Unit", unit) :
                new ObjectParameter("Unit", typeof(string));
    
            var packParameter = pack != null ?
                new ObjectParameter("Pack", pack) :
                new ObjectParameter("Pack", typeof(string));
    
            var batchParameter = batch != null ?
                new ObjectParameter("Batch", batch) :
                new ObjectParameter("Batch", typeof(string));
    
            var expiryParameter = expiry != null ?
                new ObjectParameter("Expiry", expiry) :
                new ObjectParameter("Expiry", typeof(string));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(decimal));
    
            var totalQtyParameter = totalQty.HasValue ?
                new ObjectParameter("TotalQty", totalQty) :
                new ObjectParameter("TotalQty", typeof(decimal));
    
            var mRPParameter = mRP.HasValue ?
                new ObjectParameter("MRP", mRP) :
                new ObjectParameter("MRP", typeof(decimal));
    
            var discParameter = disc.HasValue ?
                new ObjectParameter("Disc", disc) :
                new ObjectParameter("Disc", typeof(decimal));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(decimal));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var cGSTParameter = cGST.HasValue ?
                new ObjectParameter("CGST", cGST) :
                new ObjectParameter("CGST", typeof(decimal));
    
            var sGSTParameter = sGST.HasValue ?
                new ObjectParameter("SGST", sGST) :
                new ObjectParameter("SGST", typeof(decimal));
    
            var iGSTParameter = iGST.HasValue ?
                new ObjectParameter("IGST", iGST) :
                new ObjectParameter("IGST", typeof(decimal));
    
            var netAmountParameter = netAmount.HasValue ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Update_TempSaleDetails", idParameter, keyIdParameter, itemIdParameter, unitParameter, packParameter, batchParameter, expiryParameter, qtyParameter, totalQtyParameter, mRPParameter, discParameter, rateParameter, amountParameter, cGSTParameter, sGSTParameter, iGSTParameter, netAmountParameter, msg);
        }
    
        public virtual ObjectResult<Sp_get_Sale_Result> Sp_get_Sale(Nullable<decimal> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_get_Sale_Result>("Sp_get_Sale", idParameter);
        }
    
        public virtual ObjectResult<Sp_get_Sale1_Result> Sp_get_Sale1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_get_Sale1_Result>("Sp_get_Sale1");
        }
    }
}
